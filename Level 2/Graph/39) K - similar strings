class Solution {
    public int kSimilarity(String s1, String s2) {
        HashSet<String> visited = new HashSet<>();
        Queue<String> que = new ArrayDeque();
        que.add(s1);
        int level = 0;
        
        while (que.size() > 0) {
            int size = que.size();
            for (int i = 0; i < size; i++) {
                String rem = que.remove();
                if (visited.contains(rem)) {
                    continue;
                }
                visited.add(rem);
                
                if (rem.equals(s2)) {
                    return level;
                }
                
                for (String s : addNeighbours(rem, s2)) {
                    if (!visited.contains(s)) {
                        que.add(s);
                    }
                }
            }
            level++;
        }
        return -1;
    }
    
    public ArrayList<String> addNeighbours(String r, String s2) {
        ArrayList<String> res = new ArrayList<>();
        int idx = -1;
        for (int i = 0; i < r.length(); i++) {
            if (r.charAt(i) != s2.charAt(i)) {
                idx = i;
                break;
            }
        }
        
        for (int j = idx + 1; j < r.length(); j++) {
            if (r.charAt(j) == s2.charAt(idx)) {
                String get = swap(r, idx, j);
                res.add(get);                
            }
        }
        
        return res;
    }
    
    public String swap (String str, int i, int j) {
        StringBuilder sb = new StringBuilder(str);
        char c1 = sb.charAt(i);
        char c2 = sb.charAt(j);
        
        sb.setCharAt(i, c2);
        sb.setCharAt(j, c1);
        
        return sb.toString();
    }
}
