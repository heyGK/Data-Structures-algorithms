class Solution {
    public class Pair {
        int v;
        int color;
        int d;
        Pair(int v, int color, int d) {
            this.v = v;
            this.color = color;
            this.d = d;
        }
    }
    
    public int[] shortestAlternatingPaths(int n, int[][] redEdges, int[][] blueEdges) {
        ArrayList<Integer>[] redGraph = new ArrayList[n];
        ArrayList<Integer>[] blueGraph = new ArrayList[n];
        for (int[] e: redEdges) {
            if (redGraph[e[0]] == null) {
                redGraph[e[0]] = new ArrayList<>();
                redGraph[e[0]].add(e[1]);
            }
            else {
                redGraph[e[0]].add(e[1]);
            }
        }
        
        for (int[] e : blueEdges) {
            if (blueGraph[e[0]] == null) {
                blueGraph[e[0]] = new ArrayList<>();
                blueGraph[e[0]].add(e[1]);
            }
            else {
                blueGraph[e[0]].add(e[1]);
            }
        }
        
        System.out.print(redGraph[0]);
        
        HashSet<String> visited = new HashSet<>();
        Queue<Pair> que = new ArrayDeque();
        que.add(new Pair(0, 0, 0));
        int[] res = new int[n];
        Arrays.fill(res, -1);
        
        while (que.size() > 0) {
            Pair rem = que.remove();
            
            String key = rem.v + " " + rem.color;
            if (visited.contains(key)) {
                continue;
            }
            visited.add(key);
            
            if (res[rem.v] == -1) {
                res[rem.v] = rem.d;
            }
            else if (res[rem.v] > rem.d) {
                res[rem.v] = rem.d;
            }
            
            if (rem.color == 2 || rem.color == 0) {
                if (redGraph[rem.v] != null) {
                    for (int i : redGraph[rem.v]) {
                        que.add(new Pair(i, 1, rem.d + 1));
                    }
                }
            }
            if (rem.color == 1 || rem.color == 0) {
                if (blueGraph[rem.v] != null) {
                    for (int i : blueGraph[rem.v]) {
                        que.add(new Pair(i, 2, rem.d + 1));
                    }
                }
            }
        }
        
        return res;
    }
}
