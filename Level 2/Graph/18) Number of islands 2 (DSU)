import java.util.*;
import java.io.*;

public class Main {
  public static void main(String[] args) throws NumberFormatException, IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String[] st = br.readLine().split(" ");
    int m = Integer.parseInt(st[0]);
    int n = Integer.parseInt(st[1]);
    int q = Integer.parseInt(st[2]);

    int[][] pos = new int[q][2];
    for (int i = 0; i < q; i++) {
      st = br.readLine().split(" ");
      pos[i][0] = Integer.parseInt(st[0]);
      pos[i][1] = Integer.parseInt(st[1]);
    }

    System.out.println(numIslands2(m, n, pos));
  }

  public static List<Integer> numIslands2(int m, int n, int[][] positions) {
    int[][] grid = new int[m][n];
    
    parent = new int[n * m];
    rank = new int[n * m];
    
    for (int i = 0; i < n * m; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
    
    ArrayList<Integer> res = new ArrayList<>();
    
    count = 0;
    for (int[] pos : positions) {
        int x = pos[0];
        int y = pos[1];
        grid[x][y] = 1;
        
        count++;
        
        handleNewCell(x, y, x + 1, y, grid, m, n);
        handleNewCell(x, y, x - 1, y, grid, m, n);
        handleNewCell(x, y, x, y + 1, grid, m, n);
        handleNewCell(x, y, x, y - 1, grid, m, n);
        
        res.add(count);
    }
    
    return res;
  }
  
  public static void handleNewCell(int x, int y, int xx, int yy, int[][] grid, int m, int n) {
      if (xx < 0 || yy < 0 || xx >= m || yy >= n || grid[xx][yy] == 0) {
          return;
      }
      int xyCell = x * n + y;
      int xxyyCell = xx * n + yy;
      
      int xyLead = find(xyCell);
      int xxyyLead = find(xxyyCell);
      
      if (xyLead != xxyyLead) {
          count--;
          
          union(xyLead, xxyyLead);
      }
  }
  
  static int count;
  static int[] parent;
  static int[] rank;
  
  public static int find(int x) {
      if (parent[x] != x) {
          parent[x] = find(parent[x]);
          return parent[x];
      }
      else {
          return x;
      }
  }
  
  public static void union(int s1, int s2) {
      if (rank[s1] < rank[s2]) {
          parent[s1] = s2;
      }
      else if (rank[s1] > rank[s2]) {
          parent[s2] = s1;
      }
      else {
          parent[s1] = s2;
          rank[s2]++;
      }
  }
}
