class Solution {
    public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
        parent = new int[s.length()];
        rank = new int[s.length()];
        
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
        
        for (List<Integer> pair : pairs) {
            int l1 = find(pair.get(0));
            int l2 = find(pair.get(1));
            
            if (l1 != l2) {
                union(l1, l2);
            }
        }
        
        PriorityQueue<Character>[] pq = new PriorityQueue[s.length()];
        for (int i = 0; i < s.length(); i++) {
            pq[i] = new PriorityQueue<>();
        }
        
        for (int i = 0; i < s.length(); i++) {
            int l1 = find(i);
            char ch = s.charAt(i);
            pq[l1].add(ch);
        }
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            int l1 = find(i);
            char ch = pq[l1].remove();
            sb.append(ch);
        }
        
        return sb.toString();
    }
    
    int[] parent;
    int[] rank;
    
    public int find (int x) {
        if (parent[x] == x) {
            return x;
        }
        else {
            parent[x] = find(parent[x]);
            return parent[x];
        }
    }
    
    public void union(int s1, int s2) {
        if (rank[s1] < rank[s2]) {
            parent[s1] = s2;
        }
        else if (rank[s1] > rank[s2]) {
            parent[s2] = s1;
        }
        else {
            parent[s1] = s2;
            rank[s2]++;
        }
    }
}
