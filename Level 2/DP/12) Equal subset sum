class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        
        if (sum % 2 == 1) {
            return false;
        }
        
        int tar = sum / 2;
        boolean[][] dp = new boolean[nums.length + 1][tar + 1];
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = true;
                }
                else if (i == 0) {
                    dp[i][j] = false;
                }
                else if (j == 0) {
                    dp[i][j] = true;
                }
                else {
                    dp[i][j] = dp[i - 1][j];
                    if (dp[i][j] == false) {
                        int curr = nums[i - 1];
                        if (j >= curr) {
                            dp[i][j] = dp[i - 1][j - curr];
                        }
                    }
                }
            }
        }
        
        return dp[dp.length - 1][dp[0].length - 1];
    }
}
