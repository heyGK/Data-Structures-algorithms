class Solution {
    public int maxNumEdgesToRemove(int n, int[][] edges) {
        Arrays.sort(edges, (a,b) -> {
            return b[0] - a[0];
        });
        
        parent1 = new int[n + 1];
        parent2 = new int[n + 1];
        rank1 = new int[n + 1];
        rank2 = new int[n + 1];
        
        for (int i = 0; i < parent1.length; i++) {
            parent1[i] = i;
            parent2[i] = i;
            rank1[i] = 0;
            rank2[i] = 0;
        }
        
        int count = 0;
        
        for (int[] e : edges) {
            int l1 = find(e[1], parent1);
            int l2 = find(e[2], parent1);
            int l11 = find(e[1], parent2);
            int l22 = find(e[2], parent2);
            
            if (e[0] == 3) {
                 if (l1 == l2 && l11 == l22) {
                     count++;
                 }
                
                if (l1 != l2) {
                    union(l1, l2, parent1, rank1);
                }
                if (l11 != l22) {
                    union(l11, l22, parent2, rank2);
                }
            }
            
            else if (e[0] == 1) {
                if (l1 != l2) {
                    union(l1, l2, parent1, rank1);
                }
                else {
                    count++;
                }
            }
            else if (e[0] == 2) {
                if (l11 != l22) {
                    union(l11, l22, parent2, rank2);
                }
                else {
                    count++;
                }
            }
        }
        
        int countForIncomplete = 0;
        for (int i = 0; i < parent1.length; i++) {
            System.out.print(parent1[i] + " ");
            System.out.println(parent2[i] + " ");
            if(parent1[i] == i) {
                countForIncomplete++;
            }
            
            if(parent2[i] == i) {
                countForIncomplete++;
            }
        }
        
        if (countForIncomplete > 4) {
            return -1;
        }
        else {
            return count;
        }
    }
    
    int[] parent1;
    int[] parent2;
    int[] rank1;
    int[] rank2;
    
    public int find(int x, int[] parent) {
        if (parent[x] == x) {
            return x;
        }
        else {
            parent[x] = find(parent[x], parent);
            return parent[x];
        }
    }
    
    public void union(int s1, int s2, int[] parent, int[] rank) {
        if (rank[s1] < rank[s2]) {
            parent[s1] = s2;
        }
        else if (rank[s1] > rank[s2]) {
            parent[s2] = s1;
        }
        else {
            parent[s2] = s1;
            rank[s1]++;
        }
    }
}
