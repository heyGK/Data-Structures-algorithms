class Solution {
    public int maximalRectangle(char[][] matrix) {
        int[] height = new int[matrix[0].length];
        for (int i = 0; i < height.length; i++) {
            height[i] = matrix[0][i] == '0' ? 0 : 1;
        }
        
        int res = largestArea(height);
        for (int i = 1; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                height[j] = matrix[i][j] == '0' ? 0 : height[j] + 1;
            }
            
            int max = largestArea(height);
            res = Math.max(res, max);
        }
        
        return res;
    }
    
    int largestArea(int[] arr) {
        int[] left = leftSmaller(arr);
        int[] right = rightSmaller(arr);
        
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i] * (right[i] - left[i] - 1));
        }
        return max;
    }
    
    int[] leftSmaller(int[] arr) {
        Stack<Integer> stk = new Stack<>();
        int[] res = new int[arr.length];
        stk.push(arr.length - 1);
        Arrays.fill(res, -1);
        for (int i = arr.length - 2; i >= 0; i--) {
            while (stk.size() > 0 && arr[stk.peek()] > arr[i]) {
                res[stk.pop()] = i;
            }
            stk.push(i);
        }
        return res;
    }
    
    int[] rightSmaller(int[] arr) {
        Stack<Integer> stk = new Stack<>();
        int[] res = new int[arr.length];
        stk.push(0);
        Arrays.fill(res, arr.length);
        for (int i = 0; i < arr.length; i++) {
            while (stk.size() > 0 && arr[stk.peek()] > arr[i]) {
                res[stk.pop()] = i;
            }
            stk.push(i);
        }
        return res;
    }
}
