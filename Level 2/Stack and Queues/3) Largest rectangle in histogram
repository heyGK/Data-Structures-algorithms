class Solution {
    public int largestRectangleArea(int[] heights) {
        int[] left = smallerLeft(heights);
        int[] right = smallerRight(heights);
        int area = Integer.MIN_VALUE;
        for (int i = 0; i < heights.length; i++) {
            int widthFromLeft = left[i];
            int widthFromRight = right[i];
            
            int total = widthFromRight - widthFromLeft - 1;
            area = Math.max(area, total * heights[i]);
        }
        
        return area;
    }
    
    int[] smallerLeft (int[] heights) {
        Stack<Integer> stk = new Stack<>();
        int[] res = new int[heights.length];
        stk.push(heights.length - 1);
        Arrays.fill(res, -1);
        for (int i = heights.length - 2; i >= 0; i--) {
            while (stk.size() > 0 && heights[i] < heights[stk.peek()]) {
                res[stk.pop()] = i;
            }
            stk.push(i);
        }
        return res;
    }
    
    int[] smallerRight (int[] heights) {
        Stack<Integer> stk = new Stack<>();
        int[] res = new int[heights.length];
        stk.push(0);
        Arrays.fill(res, heights.length);
        for (int i = 1; i < heights.length; i++) {
            while (stk.size() > 0 && heights[i] < heights[stk.peek()]) {
                res[stk.pop()] = i;
            }
            stk.push(i);
        }
        return res;
    } 
}
