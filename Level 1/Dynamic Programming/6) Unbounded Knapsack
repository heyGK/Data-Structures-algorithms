// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            String line1[] = in.readLine().trim().split("\\s+");
            int N = Integer.parseInt(line1[0]);
            int W = Integer.parseInt(line1[1]);
            String line2[] = in.readLine().trim().split("\\s+");
            int val[] = new int[N];
            for(int i = 0;i < N;i++)
                val[i] = Integer.parseInt(line2[i]);
            String line3[] = in.readLine().trim().split("\\s+");
            int wt[] = new int[N];
            for(int i = 0;i < N;i++)
                wt[i] = Integer.parseInt(line3[i]);
                
            Solution ob = new Solution();
            System.out.println(ob.knapSack(N, W, val, wt));
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution{
    static int ans(int N, int W, int idx, int[] val, int[] wt, int[][] dp) {
        
        if (idx == N) {
            return dp[idx][W] = 0;
        }
        
        if(dp[idx][W] != 0) {
            return dp[idx][W];
        }
        
        int inc = 0;
        if (W >= wt[idx]) {
            inc = ans(N, W - wt[idx], idx, val, wt, dp) + val[idx];
        }
        
        int exc = ans(N, W, idx + 1, val, wt, dp);
        
        return dp[idx][W] = Math.max(inc, exc);
    }
    static int knapSack(int N, int W, int val[], int wt[])
    {
        // code here
        int[][] dp = new int[N + 1][W + 1];
        int res = ans(N, W, 0, val, wt, dp);
        return res;
    }
}

-------TABULATION---------
 static int knapSack(int N, int W, int val[], int wt[])
    {
        // code here
        int[][] dp = new int[N + 1][W + 1];
        
        for (int idx = N; idx >= 0; idx--) {
            for (int w = 0; w <= W; w++) {
                if (idx == N) {
                    dp[idx][w] = 0;
                    continue;
                }
                
                int inc = 0;
                if (w >= wt[idx]) {
                    inc = dp[idx][w - wt[idx]] + val[idx];
                }
                
                int exc = dp[idx + 1][w];
                
                dp[idx][w] = Math.max(inc, exc);
            }
        }
        return dp[0][W];
