class Solution {
    int m;
    int n;
    public int[] hitBricks(int[][] grid, int[][] hits) {
        m = grid.length;
        n = grid[0].length;
        
        parent = new int[n * m + 1];
        rank = new int[n * m + 1];
        size = new int[n * m + 1];
        
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
            rank[i] = 0;
            size[i] = 1;
        }
        
        for (int[] hit : hits) {
            int x = hit[0];
            int y = hit[1];
            
            if (grid[x][y] == 1) {
                grid[x][y] = 2;
            }
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    handleUnion(grid, i, j);
                }
            }
        }
        
        int[] res = new int[hits.length];
        for (int i = hits.length - 1; i>= 0; i--) {
            int x = hits[i][0];
            int y = hits[i][1];
            
            if(grid[x][y] == 2) {
                int bricksIn0 = size[find(0)];
                grid[x][y] = 1;
                handleUnion(grid, x, y);
                int newBricks0 = size[find(0)];
                
                if (newBricks0 > bricksIn0) {
                    res[i] = newBricks0 - bricksIn0 - 1;   
                }
            }
        }
        
        return res;
    }
    
    int[][] dirs = {{1,0}, {0,1}, {-1,0}, {0,-1}};
    public void handleUnion(int[][] grid, int x, int y) {
        int bno = x * n + y + 1;
        
        for (int[] dir : dirs) {
            int newX = x + dir[0];
            int newY = y + dir[1];
            
            if (newX < m && newY < n && newX >= 0 && newY >= 0 && grid[newX][newY] == 1) {
                int newBno = newX * n + newY + 1;
                union(bno, newBno);
            }
        }
        
        if (x == 0) {
            union(0, bno);
        }
    }
    
    int[] parent;
    int[] rank;
    int[] size;
    
    public int find(int x) {
        if (parent[x] == x) {
            return x;
        }
        else {
            parent[x] = find(parent[x]);
            return parent[x];
        }
    }
    
    public void union(int x, int y) {
        int l1 = find(x);
        int l2 = find(y);
        
        if (l1 == l2) {
            return;
        }
        
        if (rank[l1] > rank[l2]) {
            size[l1] += size[l2];
            parent[l2] = l1;
        }
        else if (rank[l1] < rank[l2]) {
            size[l2] += size[l1];
            parent[l1] = l2;
        }
        else {
            size[l1] += size[l2];
            parent[l2] = l1;
            rank[l1]++;
        }
    }
}
