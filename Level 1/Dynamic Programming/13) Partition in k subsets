import java.io.*;
import java.util.*;

public class Main {
        
    public static long partitionKSubset(int n, int k, long[][] dp) {
        // write your code here
        if (n == 0 || k == 0 || n < k) {
            return dp[n][k] = 0;
        }

        if (n == k || k == 1) {
            return dp[n][k] = 1;
        }

        if (dp[n][k] != 0) {
            return dp[n][k];
        }
 
        long call1 = k*partitionKSubset(n - 1, k, dp);
        long call2 = partitionKSubset(n - 1, k - 1, dp);

        return dp[n][k] = call1 + call2;
    }
    
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int k = scn.nextInt();
        
        long[][] dp = new long[n + 1][k + 1];
        long res = partitionKSubset(n, k, dp);
        System.out.println(res);
    }
}

-------TABULATION--------
public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int k = scn.nextInt();
        
        long[][] dp = new long[n + 1][k + 1];

        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= k; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;
                    continue;
                }

                if (i == j || j == 1) {
                    dp[i][j] = 1;
                    continue;
                }
        
                long call1 = j*dp[i - 1][j];
                long call2 = dp[i - 1][j - 1];

                dp[i][j] = call1 + call2;
            }
        }
        System.out.println(dp[n][k]);
    }
