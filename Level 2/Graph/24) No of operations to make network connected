class Solution {
    public int makeConnected(int n, int[][] connections) {
        if (n - 1 > connections.length) {
            return -1;
        }
        
        parent = new int[n];
        rank = new int[n];
        
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
        
        for (int i = 0; i < connections.length; i++) {
            int l1 = find(connections[i][0]);
            int l2 = find(connections[i][1]);
            
            if (l1 != l2) {
                union(l1, l2);
            }
        }
        
        int count = 0;
        for (int i = 0; i < parent.length; i++) {
            if (parent[i] == i) {
                count++;
            }
        }
        
        return count - 1;
    }
    
    int[] parent;
    int[] rank;
    
    public int find(int x) {
        if (parent[x] == x) {
            return x;
        }
        else {
            parent[x] = find(parent[x]);
            return parent[x];
        }
    }
    
    public void union(int s1, int s2) {
        if (rank[s1] < rank[s2]) {
            parent[s1] = s2;
        }
        else if (rank[s2] < rank[s1]) {
            parent[s2] = s1;
        }
        else {
            parent[s1] = s2;
            rank[s2]++;
        }
    }
}
