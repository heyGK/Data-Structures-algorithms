class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        
        for (int[] i : prerequisites) {
                graph[i[0]].add(i[1]);
        }
        
        int[] tsort = new int[numCourses];
        int[] in = new int[numCourses];
        
        for(int i = 0; i < numCourses; i++) {
            for (int j : graph[i]) {
                in[j]++;
            }
        }
        
        Queue<Integer> que = new ArrayDeque();
        for (int i = 0; i < in.length; i++) {
            if (in[i] == 0) {
                que.add(i);
            }
        }
        
        int idx = 0;
        while (que.size() > 0) {
            int rem = que.remove();
            tsort[idx] = rem;
            idx++;
            
            for (int i : graph[rem]) {
                in[i]--;
                
                if (in[i] == 0) {
                    que.add(i);
                }
            }
        }
        
        if (idx == numCourses) {
            return true;
        }
        else {
            return false;
        }
    }
}
