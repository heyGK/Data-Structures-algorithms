import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      // write your code here
      int[] visited = new int[vtces];
      Arrays.fill(visited, -1);
      for (int i = 0; i < vtces; i++) {
         if (visited[i] == -1) {
            boolean isOdd = isOddCycle(graph, 0, visited);
            if (isOdd == true) {
               System.out.println(false);
               return;
            }
         }
      }
      System.out.println(false);
   }

   public static boolean isOddCycle(ArrayList<Edge>[] graph, int src, int[] visited) {
      Queue<Pair> que = new ArrayDeque();
      que.add(new Pair(src, 0));
      while (que.size() > 0) {
         Pair rem = que.remove();
         if (visited[rem.src] != -1) {
            if ((visited[rem.src] + rem.level) % 2 == 1) {
               return true;
            }
            else {
               continue;
            }
         }

         visited[rem.src] = rem.level;
         for (Edge e : graph[rem.src]) {
            if (visited[e.nbr] == -1) {
               que.add(new Pair(e.nbr, rem.level + 1));
            }
         }
      }
      return false;
   }

   public static class Pair {
      int src;
      int level;

      Pair (int src, int level) {
         this.src = src;
         this.level = level;
      }
   }
}
