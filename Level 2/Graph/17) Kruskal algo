import java.io.*;
import java.util.*;

public class Main {
   static class Edge implements Comparable<Edge> {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
      
      public int compareTo (Edge e) {
          return this.wt - e.wt;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      // write your code here
      kruskal(graph);
   }
   
   public static void kruskal (ArrayList<Edge>[] graph) {
       PriorityQueue<Edge> pq = new PriorityQueue<>();
       for (int i = 0; i < graph.length; i++) {
           for (Edge j : graph[i]) {
               pq.add(j);
           }
       }
       
       parent = new int[graph.length];
       rank = new int[graph.length];
       for (int i = 0; i < graph.length; i++) {
           parent[i] = i;
           rank[i] = 0;
       }
       
       while (pq.size() > 0) {
           Edge rem = pq.remove();
           
           int setSrc = find(rem.src);
           int setNbr = find(rem.nbr);
           
           if (setSrc != setNbr) {
               System.out.println(rem.src + "-" + rem.nbr + "@" + rem.wt);
               
               union(rem.src, rem.nbr);
           }
        }
    }
    static int[] parent;
    static int[] rank;
    
    public static int find(int x) {
        if (parent[x] != x) {
            int setLead = find(parent[x]);
            
            // compression 
            parent[x] = setLead;
            return setLead;
        }
        else {
            return x;
        }
    }
    
    public static void union (int s1, int s2) {
        if (rank[s1] < rank[s2]) {
            parent[s1] = s2;
        }
        else if (rank[s1] > rank[s2]) {
            parent[s2] = s1;
        }
        else {
            parent[s1] = s2;
            rank[s1]++;
        }
    }
}
