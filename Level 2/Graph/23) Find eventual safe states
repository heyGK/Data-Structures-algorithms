class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int[] out = new int[graph.length];
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
        for (int i = 0; i < graph.length; i++) {
            for (int neigh : graph[i]) {
                if (!map.containsKey(neigh)) map.put(neigh, new ArrayList<Integer>());
                map.get(neigh).add(i);
                
                out[i]++;
            }
        }
        
        ArrayList<Integer> res = new ArrayList<>();
        Queue<Integer> que = new ArrayDeque();
        for (int i = 0; i < graph.length; i++) {
            if (out[i] == 0) {
                que.add(i);
            }
        }
        
        while (que.size() > 0) {
            int rem = que.remove();
            res.add(rem);
            if (map.containsKey(rem)) {
                for (int neigh : map.get(rem)) {
                    out[neigh]--;
                    
                    if (out[neigh] == 0) {
                        que.add(neigh);
                    }
                }
            }
        }
        
        Collections.sort(res);
        return res;
    }
}
