class Solution {
    public class Pair {
        String config;
        int level;
        
        Pair(String config, int level) {
            this.config = config;
            this.level = level;
        }
    }
    
    public int slidingPuzzle(int[][] board) {
        String str = convertBoard(board);
        Queue<Pair> que = new ArrayDeque();
        que.add(new Pair(str, 0));
        HashSet<String> visited = new HashSet<>();
        
        while (que.size() > 0) {
            Pair rem = que.remove();
            
            if (visited.contains(rem.config)) {
                continue;
            }
            visited.add(rem.config);
            
            if (rem.config.equals("123450")) {
                return rem.level;
            };
            
            int[][] dir = {{1,3}, {0,2,4}, {1,5}, {0,4}, {1,3,5}, {2,4}};
            int idx = rem.config.indexOf('0');
            for (int i : dir[idx]) {
                String newConfig = swap(rem.config, i, idx);
                if (!visited.contains(newConfig)) {
                    que.add(new Pair(newConfig, rem.level + 1));
                }
            }
        }
        return -1;
    }
    
    public String swap (String conf, int i, int idx) {
        StringBuilder sb = new StringBuilder(conf);
        
        char ch = sb.charAt(i);
        char ch2 = sb.charAt(idx);
        
        sb.setCharAt(idx, ch);
        sb.setCharAt(i, ch2);
        
        return sb.toString();
    }
    
    public String convertBoard (int[][] board) {
        StringBuilder sb = new StringBuilder();
        for (int[] row : board) {
            for (int val : row) {
                sb.append(val);
            }
        }
        
        return sb.toString();
    }
}
