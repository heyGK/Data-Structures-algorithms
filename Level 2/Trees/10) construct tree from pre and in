class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i);
        }
        
        TreeNode root = construct(0, preorder.length - 1, 0, inorder.length - 1, preorder, map);
        
        return root;
    }
    
    public TreeNode construct(int preLow, int preHi, int inLow, int inHi, int[] preorder, HashMap<Integer, Integer> map) {
        if (preLow > preHi || inLow > inHi) {
            return null;
        }
        TreeNode node = new TreeNode();
        node.val = preorder[preLow];
        
        int index = map.get(preorder[preLow]);
        int lh = index - inLow;
        
        node.left = construct(preLow + 1, preLow + lh, inLow, index - 1, preorder, map);
        
        node.right = construct(preLow + lh + 1, preHi, index + 1, inHi, preorder, map);
        
        return node;
    }
}
