class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long ans;
    static long inversionCount(long arr[], long N)
    {
        // Your Code Here
        ans = 0;
        mergeSort(arr, 0, arr.length - 1);
        return ans;
    }
    
    static long[] mergeSort(long[] arr, int lo, int hi) {
        if (lo == hi) {
            long[] res = new long[1];
            res[0] = arr[lo];
            return res;
        }
        
        int mid = (lo + hi) / 2;
        
        long[] left = mergeSort(arr, lo, mid);
        long[] right = mergeSort(arr, mid + 1, hi);
        long[] total = merge2(left, right);
        
        return total;
    }
    
    static long[] merge2(long[] left, long[] right) {
        long[] res = new long[left.length + right.length];
        int i = 0;
        int j = 0;
        int k = 0;
        
        while(i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                res[k] = left[i];
                i++;
                k++;
            }
            else {
                res[k] = right[j];
                ans += left.length - i;
                j++;
                k++;
            }
        }
        
        while (i < left.length) {
            res[k] = left[i];
            i++;
            k++;
        }
        
        while (j < right.length) {
            res[k] = right[j];
            j++;
            k++;
        }
        
        return res;
    }
}
