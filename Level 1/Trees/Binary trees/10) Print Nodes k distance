public static ArrayList<Node> nodeToRoot (Node node, int data) {
    if (node == null) {
      return new ArrayList();
    }

    if (node.data == data) {
      ArrayList<Node> ans = new ArrayList<Node>();
      ans.add(node);
      return ans;
    }

    ArrayList<Node> left = nodeToRoot(node.left, data);
    if (left.size() > 0) {
      left.add(node);
      return left;
    }

    ArrayList<Node> right = nodeToRoot(node.right, data);
    if (right.size() > 0) {
      right.add(node);
      return right;
    }

    return new ArrayList();
  }

  public static void printNodes(Node node, int k, Node blocker) {
    if (node == null || node == blocker) {
      return;
    }

    if (k == 0) {
      System.out.println(node.data);
      return;
    }

    printNodes(node.left, k - 1, blocker);
    printNodes(node.right, k - 1, blocker);
  }

  public static void printKNodesFar(Node node, int data, int k) {
    // write your code here
    ArrayList<Node> NTR = nodeToRoot(node, data);

    for (int i = 0; i < NTR.size(); i++) {
        Node blocker = i - 1 >= 0 ? NTR.get(i - 1) : null;
        printNodes(NTR.get(i), k - i, blocker);
    }
  }
