class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean[] visited = new boolean[adj.size()];
        boolean[] dfsVisited = new boolean[adj.size()];
        for (int i = 0; i < visited.length; i++) {
            if (!visited[i]) {
                if (dfs(i, adj, visited, dfsVisited)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    public boolean dfs(int src, ArrayList<ArrayList<Integer>> adj, boolean[] visited, boolean[] dfsVisited) {
        visited[src] = true;
        dfsVisited[src] = true;
        for (int n : adj.get(src)) {
            if(!visited[n] == true) {
                if (dfs(n, adj, visited, dfsVisited)) {
                    return true;
                }
            }
            else if(dfsVisited[n]) {
                return true;
            }
        }
        
        dfsVisited[src] = false;
        return false;
    }
}
