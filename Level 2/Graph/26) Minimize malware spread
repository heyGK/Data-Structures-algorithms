class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent = new int[graph.length];
        size = new int[graph.length];
        
        for (int i = 0; i < graph.length; i++) {
            parent[i] = i;
            size[i] = 1;
        }
        
        for (int i = 0; i < graph.length; i++) {
            for (int j = 0; j < graph.length; j++) {
                if (i != j && graph[i][j] == 1) {
                    unionHelper(i, j);
                }
            }
        }
        
        int[] impared = new int[graph.length];
        for (int i : initial) {
            int l1 = find(i);
            impared[l1]++;
        }
        
        Arrays.sort(initial);
        int ans_i = initial[0];
        int ans_size = 0;
        for (int i : initial) {
            int l1 = find(i);
            if (impared[l1] == 1) {
                if (size[l1] > ans_size) {
                    ans_i = i;
                    ans_size = size[l1];
                }
            }
        }
        
        return ans_i;
    }
    
    int[] parent;
    int[] size;
    
    public int find(int x) {
        if (parent[x] == x) {
            return x;
        }
        else {
            parent[x] = find(parent[x]);
            return parent[x];
        }
    }
    
    public void unionHelper(int s1, int s2) {
        int l1 = find (s1);
        int l2 = find (s2);
        
        if (size[l1] < size[l1]) {
            parent[l1] = l2;
            size[l2] += size[l1];
        }
        else {
            parent[l2] = l1;
            size[l1] += size[l2];
        }
    }
}
