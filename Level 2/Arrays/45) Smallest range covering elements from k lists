class Solution {
    public class Pair implements Comparable<Pair> {
        int listI;
        int dataI;
        int val;
        
        Pair (int listI, int dataI, int val) {
            this.dataI = dataI;
            this.listI = listI;
            this.val = val;
        }
        
        public int compareTo(Pair p) {
            return this.val - p.val;
        }
    }
    
    public int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.size(); i++) {
            pq.add(new Pair(i, 0, nums.get(i).get(0)));
            max = Math.max(max, nums.get(i).get(0));
        }
        
        int rStart = 0;
        int rEnd = 0;
        int rSize = Integer.MAX_VALUE;
        while (pq.size() == nums.size()) {
            Pair rem = pq.remove();
            int currSize = max - rem.val;
            if (currSize < rSize) {
                rSize = currSize;
                rStart = rem.val;
                rEnd = max;
            }
            
            if (rem.dataI < nums.get(rem.listI).size() - 1) {
                rem.dataI++;
                int val = nums.get(rem.listI).get(rem.dataI);
                pq.add(new Pair(rem.listI, rem.dataI, val));
                       
                if (val > max) {
                    max = val;
                }
            }
        }
                       
        int[] range = {rStart, rEnd};
        return range;
    }
}
