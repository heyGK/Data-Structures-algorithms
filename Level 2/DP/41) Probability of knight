class Solution
{
    public double findProb(int N, int start_x, int start_y, int step)
    {
        // Code here
        double[][][] dp = new double[N][N][step + 1];
        dp[start_x][start_y][0] = 1;
        
        int[][] dir = {{2,1}, {2,-1}, {-2,1}, {-2,-1}, {1,2}, {-1,2}, {1,-2}, {-1,-2}}; 
        for (int move = 1; move <= step; move++) {
            for (int i = 0; i < dp.length; i++) {
                for (int j = 0; j < dp[0].length; j++) {
                    for (int[] d : dir) {
                        int x = i + d[0];
                        int y = j + d[1];
                        
                        if (x >= 0 && x < N && y >= 0 && y < N) {
                            dp[x][y][move] += dp[i][j][move - 1] / 8;
                        }
                    }
                }
            }
        }
        
        double res = 0.0;
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                res += dp[i][j][step];
            }
        }
        
        return res;
    }
}
