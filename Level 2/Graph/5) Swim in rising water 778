class Solution {
    public class Pair implements Comparable<Pair> {
        int x;
        int y;
        int wt;
        
        Pair (int x, int y, int wt) {
            this.x = x;
            this.y = y;
            this.wt = wt;
        }
        
        public int compareTo(Pair o) {
            return this.wt - o.wt;
        }
    }
    
    public int swimInWater(int[][] grid) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(0, 0, grid[0][0]));
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        
        while (pq.size() > 0) {
            Pair rem = pq.remove();
            if (visited[rem.x][rem.y] == true) {
                continue;
            }
            
            visited[rem.x][rem.y] = true;
            
            if (rem.x == (grid.length - 1) && rem.y == (grid[0].length - 1)) {
                return rem.wt;
            }
            
            addNeighbours(grid, visited, rem.x + 1, rem.y, rem.wt, pq);
            addNeighbours(grid, visited, rem.x - 1, rem.y, rem.wt, pq);
            addNeighbours(grid, visited, rem.x, rem.y + 1, rem.wt, pq);
            addNeighbours(grid, visited, rem.x, rem.y - 1, rem.wt, pq);
        }
        
        return -1;
    }
    
    public void addNeighbours(int[][] grid, boolean[][] visited, int x, int y, int wt, PriorityQueue<Pair> pq) {
        if(x < 0 || y < 0 || x >= grid.length || y >= grid[0].length || visited[x][y] == true) {
            return;
        }
        
        pq.add(new Pair(x, y, Math.max(wt, grid[x][y])));
    }
}
