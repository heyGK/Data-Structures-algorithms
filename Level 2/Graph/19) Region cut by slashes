class Solution {
    public int regionsBySlashes(String[] grid) {
        parent = new int[4*grid.length*grid.length];
        rank = new int[4*grid.length*grid.length];
        
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
        
            for (int i = 0; i < grid.length; i++) {
                for (int j = 0; j < grid[i].length(); j++) {
                    char ch = grid[i].charAt(j);
                    int bNo = i * grid.length + j;

                    if (ch != '/') {
                        unionHelper(4 * bNo + 0, 4 * bNo + 1);
                        unionHelper(4 * bNo + 2, 4 * bNo + 3);
                    }

                    if (ch != '\\') {
                        unionHelper(4 * bNo + 0, 4 * bNo + 3);
                        unionHelper(4 * bNo + 1, 4 * bNo + 2);
                    }

                    if (i > 0) {
                        int oBno = (i - 1) * grid.length + j;
                        unionHelper(4 * bNo + 0, 4 * oBno + 2);
                    }

                    if (j > 0) {
                        int oBno = i * grid.length + (j - 1);
                        unionHelper(4 * bNo + 3, 4* oBno + 1);
                    }

                    if (i < grid.length - 1) {
                        int oBno = (i + 1) * grid.length + j;
                        unionHelper(4 * bNo + 2, 4 * oBno + 0);
                    }

                    if (j < grid.length - 1) {
                        int oBno = i * grid.length + (j + 1);
                        unionHelper(4 * bNo + 1, 4 * oBno + 3);
                    }
                }
            }
        int count = 0;
        for (int i = 0; i < parent.length; i++) {
            if (parent[i] == i) {
                count++;
            }
        } 
    
        return count;
    }
     
    
    int[] parent;
    int[] rank;
    
    public int find (int x) {
        if (parent[x] == x) {
            return x;
        }
        else {
            parent[x] = find(parent[x]);
            return parent[x];
        }
    }
    
    public void union (int s1, int s2) {
        if (rank[s1] < rank[s2]) {
            parent[s1] = s2;
        }
        else if (rank[s1] > rank[s2]) {
            parent[s2] = s1;
        }
        else {
            parent[s1] = s2;
            rank[s2]++;
        }
    }
    
    public void unionHelper(int x, int y) {
        int x1 = find(x);
        int x2 = find(y);
        
        if (x1 != x2) {
            union(x1, x2);
        }
    }
}
