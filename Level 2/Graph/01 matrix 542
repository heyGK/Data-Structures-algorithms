class Solution {
    public class Pair {
        int x;
        int y;
        int d;
        Pair (int x, int y, int d) {
            this.x = x;
            this.y = y;
            this.d = d;
        }
    }
    
    public int[][] updateMatrix(int[][] mat) {
        Queue<Pair> que = new ArrayDeque();
        int[][] ans = new int[mat.length][mat[0].length];
        boolean[][] visited = new boolean[mat.length][mat[0].length];
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[0].length; j++) {
                if (mat[i][j] == 0) {
                    que.add(new Pair(i, j, 0));
                    ans[i][j] = 0;
                }
            }
        }
        
        while (que.size() > 0) {
            Pair rem = que.remove();
            if (visited[rem.x][rem.y] == true) {
                continue;
            }
            
            visited[rem.x][rem.y] = true;
            ans[rem.x][rem.y] = rem.d;
            
            addNeighbours(rem.d + 1, rem.x + 1, rem.y, que, mat, visited);
            addNeighbours(rem.d + 1, rem.x - 1, rem.y, que, mat, visited);
            addNeighbours(rem.d + 1, rem.x, rem.y + 1, que, mat, visited);
            addNeighbours(rem.d + 1, rem.x, rem.y - 1, que, mat, visited);
        }
        
        return ans;
    }
    
    public void addNeighbours(int level, int x, int y, Queue<Pair> que, int[][] mat, boolean[][] visited) {
        if (x < 0 || y < 0 || x >= mat.length || y >= mat[0].length || visited[x][y] == true) {
            return;
        }
        
        que.add(new Pair(x, y, level));
    }
}
