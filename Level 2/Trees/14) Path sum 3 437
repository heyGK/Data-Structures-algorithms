class Solution {
    int count = 0;
    public int pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return 0;
        }
        
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        helper(root, root.val, targetSum, map);
        return count;
    }
    
    public void helper(TreeNode root, int sum, int tar, HashMap<Integer, Integer> map) {
        if (map.containsKey(sum - tar) == true) {
            count += map.get(sum - tar);
        }
        
        if (map.containsKey(sum) == false) {
            map.put(sum, 1);
        }
        else {
            map.put(sum, map.get(sum) + 1);
        }
        
        if (root.left != null) {
            helper(root.left, sum + root.left.val, tar, map);
        }
        if (root.right != null) {
             helper(root.right, sum + root.right.val, tar, map);
        }
      
        if (map.get(sum) == 1) {
            map.remove(sum);
        }
        else {
            map.put(sum, map.get(sum) - 1);
        }
    }
}
