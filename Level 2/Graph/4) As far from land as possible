class Solution {
    public class Pair {
        int x;
        int y;
        int d;
        Pair (int x, int y, int d) {
            this.x = x;
            this.y = y;
            this.d = d;
        }
    }
    
    public int maxDistance(int[][] grid) {
        Queue<Pair> que = new ArrayDeque();
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    que.add(new Pair(i, j, 0));
                }
                else {
                    count++;
                }
            }
        }
        if (count == 0 || count == grid.length * grid[0].length) {
            return -1;
        }
        
        int prevLevel = 0;
        while (que.size() > 0) {
            Pair rem = que.remove();
            if (visited[rem.x][rem.y] == true) {
                continue;
            }
            
            visited[rem.x][rem.y] = true;
            int newLevel = rem.d;
            if (newLevel > prevLevel) {
                prevLevel = newLevel;
            }
            
            addNeighbours(grid, visited, que, rem.x + 1, rem.y, rem.d + 1);
            addNeighbours(grid, visited, que, rem.x - 1, rem.y, rem.d + 1);
            addNeighbours(grid, visited, que, rem.x, rem.y + 1, rem.d + 1);
            addNeighbours(grid, visited, que, rem.x, rem.y - 1, rem.d + 1);
        }
        
        return prevLevel;
    }
    
    public void addNeighbours(int[][] grid, boolean[][] visited, Queue<Pair> que, int x, int y, int level) {
        if (x < 0 || y < 0 || x >= grid.length || y >= grid[0].length || visited[x][y] == true) {
            return;
        }
        
        que.add(new Pair(x, y, level));
    }
}
