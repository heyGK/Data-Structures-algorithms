import java.io.*;
import java.util.*;

public class Main {
    public static int goldmine(int[][] mine, int n, int m, int r, int c, int[][] dp) {
        if (c == m - 1) {
            return dp[r][c] = mine[r][c];
        }

        if (dp[r][c] != 0) {
            return dp[r][c];
        }

        int ans = 0;
        if (r + 1 < n) {
            ans = Math.max(ans, goldmine(mine, n, m, r + 1, c + 1, dp));
        }

        ans = Math.max(ans, goldmine(mine, n, m, r, c + 1, dp));

        if (r - 1 >= 0) {
            ans = Math.max(ans, goldmine(mine, n, m, r - 1, c + 1, dp));
        }

        return dp[r][c] = ans + mine[r][c];
    }

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();

        int[][] mine = new int[n][m];
        for (int i = 0; i < mine.length; i++) {
            for (int j = 0; j < mine[0].length; j++) {
                mine[i][j] = scn.nextInt();
            }
        }

        // int ans = Integer.MIN_VALUE;
        // for (int i = 0; i < mine.length; i++) {
        //     ans = Math.max(ans, goldmine(mine, n, m, i, 0));
        // }
        // System.out.println(ans);

        int[][] dp = new int[n][m];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], 0);
        }

        int res = 0;
        // for (int i = 0; i < mine.length; i++) {
        //     ans = Math.max(ans, goldmine(mine, n, m, i, 0, dp));
        // }
        // System.out.println(ans);

        // Tabulation
        for (int c = m - 1; c >= 0; c--) {
        for (int r = 0; r < n; r++) {
            if (c == m - 1) {
                dp[r][c] = mine[r][c];
                continue;
            }

            int ans = 0;
            if (r + 1 < n) {
                ans = Math.max(ans, dp[r + 1][c + 1]);
            }

            ans = Math.max(ans, dp[r][c + 1]);

            if (r - 1 >= 0) {
                ans = Math.max(ans, dp[r - 1][c + 1]);
            }

            dp[r][c] = ans + mine[r][c];
        }
        
    } 
        for (int i = 0; i < n; i++) {
            res = Math.max(res, dp[i][0]);
        }
        System.out.println(res);
    }
}
