class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int[] nge = new int[nums.length];   // next greater element
        Stack<Integer> stk = new Stack<>();
        
        stk.push(nums.length - 1);
        nge[nums.length - 1] = nums.length;
        
        for (int i = nums.length - 2; i >= 0; i--) {
            int val = nums[i];
            while (stk.size() > 0 && val >= nums[stk.peek()]) {
                stk.pop();
            }
            
            if (stk.size() == 0) {
                nge[i] = nums.length;
            }
            else {
                nge[i] = stk.peek();
            }
            
            stk.push(i);
        }
        
        int[] res = new int[nums.length - k + 1];
        int j = 0;
        for (int i = 0; i < res.length; i++) {
            if (j < i) {
                j = i;
            }
            while (nge[j] <= i + k - 1) {
                j = nge[j];
            }
            
            res[i] = nums[j];
        }
        
        return res;
    }
}
