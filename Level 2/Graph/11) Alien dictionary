class Solution
{
    public String findOrder(String [] dict, int N, int K)
    {
        // Write your code here
        ArrayList<Integer>[] graph = new ArrayList[K];
        for (int i = 0; i < K; i++) {
            graph[i] = new ArrayList<>();
        }
        
        for (int i = 0; i < dict.length - 1; i++) {
            String s1 = dict[i];
            String s2 = dict[i + 1];
            for (int j = 0; j < Math.min(s1.length(), s2.length()); j++) {
                char ch1 = s1.charAt(j);
                char ch2 = s2.charAt(j);
                
                if (ch1 != ch2) {
                    graph[ch1 - 'a'].add(ch2 - 'a');
                    break;
                }
            }
        }
        
        boolean[] visited = new boolean[K];
        Stack<Integer> stk = new Stack<>();
        for (int i = 0; i < K; i++) {
            if (!visited[i]) {
                dfs(graph, visited, stk, i);
            }
        }
        
        String ans = "";
        while (stk.size() > 0) {
            ans += (char)(stk.pop() + 'a');
        }
        
        return ans;
    }
    
    public void dfs(ArrayList<Integer>[] graph, boolean[] visited, Stack<Integer> stk, int v) {
        visited[v] = true;
        for (int i : graph[v]) {
            if (!visited[i]) {
                dfs(graph, visited, stk, i);
            }
        }
        
        stk.push(v);
    }
}
