class Solution {
    public class Pair {
        int x;
        int y;
        boolean border;
        
        Pair (int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public int[][] colorBorder(int[][] grid, int row, int col, int color) {
        Queue<Pair> que = new ArrayDeque();
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        ArrayList<Pair> arr = new ArrayList<>();
        
        int myColor = grid[row][col];
        que.add(new Pair(row, col));
        
        while (que.size() > 0) {
            Pair rem = que.remove();
            
            if (visited[rem.x][rem.y] == true) {
                continue;
            }
            
            visited[rem.x][rem.y] = true;
            rem.border = isBorder(grid, rem.x, rem.y, myColor);
            if (rem.border == true) {
                arr.add(rem);
            }
            
            addNeighbours(grid, visited, rem.x + 1, rem.y, myColor, que);
            addNeighbours(grid, visited, rem.x - 1, rem.y, myColor, que);
            addNeighbours(grid, visited, rem.x, rem.y + 1, myColor, que);
            addNeighbours(grid, visited, rem.x, rem.y - 1, myColor, que);
        }
        
        for (Pair pair : arr) {
            grid[pair.x][pair.y] = color;
        }
        
        return grid;
    }
    
    public void addNeighbours(int[][] grid, boolean[][] visited, int x, int y, int color, Queue<Pair> que) {
        if (x < 0 || y < 0 || x >= grid.length || y >= grid[0].length || visited[x][y] == true || grid[x][y] != color) {
            return;
        }
        
        que.add(new Pair(x, y));
    }
    
    public boolean isBorder(int[][] grid, int x, int y, int color) {
        if (x == 0 || x == grid.length - 1 || y == 0 || y == grid[0].length - 1) {
            return true;
        }
        
        else if (grid[x + 1][y] != color || grid[x - 1][y] != color) {
            return true;    
        }
        
        else if (grid[x][y + 1] != color || grid[x][y - 1] != color) {
            return true;
        }
        
        else {
            return false;
        }
    }
}


-------------DFS------------
class Solution {
    public int[][] colorBorder(int[][] grid, int r0, int c0, int color) {
        if(grid == null || grid.length == 0)
            return null;
        int oldColor = grid[r0][c0];
        dfs(grid, r0, c0, oldColor);
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] < 0)
                    grid[i][j] = color;
            }
        }
        return grid;
    }
    public void dfs(int[][] grid, int i, int j, int oldColor) {
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] != oldColor) 
            return;
        grid[i][j] = -oldColor;
        dfs(grid, i+1, j, oldColor);
        dfs(grid, i-1, j, oldColor);
        dfs(grid, i, j+1, oldColor);
        dfs(grid, i, j-1, oldColor);
        if(i > 0 && j > 0 && i < grid.length-1 && j < grid[0].length-1
           && oldColor == Math.abs(grid[i+1][j])
           && oldColor == Math.abs(grid[i-1][j])
           && oldColor == Math.abs(grid[i][j+1])
           && oldColor == Math.abs(grid[i][j-1]))
            grid[i][j] = oldColor;
    }
}
