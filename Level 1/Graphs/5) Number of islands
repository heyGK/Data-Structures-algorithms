class Solution {
    public int numIslands(char[][] grid) {
        int ans = 0;
        
        for(int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid[0].length; c++) {
                if (grid[r][c] == '1') {
                    dfs(grid, r, c);
                    ans++;
                }
            }
        }
        
        return ans;
    }
    
    public int[][] dir = {{0, -1}, {1, 0}, {-1, 0}, {0, 1}};
    public void dfs(char[][] grid, int r, int c) {
        grid[r][c] = 2;
        for (int i = 0; i < 4; i++) {
            int nr = r + dir[i][0];
            int nc = c + dir[i][1];
            
            if (nr >= 0 && nc >= 0 && nr < grid.length && nc < grid[0].length && grid[nr][nc] == '1') {
                dfs(grid, nr, nc);
            }
        }
    }
}
